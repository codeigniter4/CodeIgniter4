# When a PR is opened or a push is made, perform
# a static analysis check on the code using PHPStan.
name: PHPStan

on:
  pull_request:
    branches:
      - 'develop'
      - '4.*'
    paths:
      - 'app/**'
      - 'system/**'
      - composer.json
      - phpstan.neon.dist
  push:
    branches:
      - 'develop'
      - '4.*'
    paths:
      - 'app/**'
      - 'system/**'
      - composer.json
      - phpstan.neon.dist

jobs:
  build:
    name: PHP ${{ matrix.php-versions }} Static Analysis
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.4', '8.0']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: intl

      - name: Use latest Composer
        run: composer self-update

      - name: Validate composer.json
        run: composer validate --strict

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Create composer cache directory
        run: mkdir -p ${{ steps.composer-cache.outputs.dir }}

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Create PHPStan result cache directory
        run: mkdir -p build/phpstan

      - name: Cache PHPStan result cache directory
        uses: actions/cache@v2
        with:
          path: build/phpstan
          key: ${{ runner.os }}-phpstan-${{ github.sha }}
          restore-keys: ${{ runner.os }}-phpstan-

      - name: Install dependencies
        run: composer update --ansi --no-interaction

      - name: Run static analysis
        run: vendor/bin/phpstan analyse
